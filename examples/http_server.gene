#!/usr/bin/env gene run

# Import not yet supported
# (import genex/http/*)

# The main app class
(class App

   # Constructor
   # First arg is automatically stored as `port` property in the instance
   (.ctor /port
      # Initializes `middleware` property as an empty array
      (= self/middlewares [])
   )

   # Helper method for constructing handlers from /middlewares and /handler
   (.fn construct_handler [middleware_index]
      (if (< middleware_index (self/middlewares .length))
         (do
            (var middleware (self/middlewares .at middleware_index))
            (var handler    (self .construct_handler (+ middleware_index 1)))
            (middleware handler))
       else
         self/handler
      )
   )

   # Construct the root handler based on /middlewares and /handler
   # Start the HTTP server
   (.fn start _
      # Note: print and println inserts " " between arguments
      (println "Starting HTTP server at port" self/port "...")

      (var root_handler (self .construct_handler 0))
      # start_server and run_forever not available
      (print "Would start server on port" self/port "with handler")
   )
)

# A dummy router that calls handlers one by one until one responds the request.
(class DummyRouter

   # Constructor
   (.ctor _
      (= self/handlers [])
   )

   # Define `call` method which enables the router to be invoked like any handler,
   # i.e. (<dummy router> req)
   (.fn call [req]
      (for h in self/handlers
         (var result (h req))
         (if result
            (println (result .get "status") (req .get "method") (req .get "url"))
            (return result)
         )
      )

      # No handler responded the request, return 404 Not found.
      # respond not implemented
      nil
   )
)

# A simple handler that responds to /hello
(fn hello [req]
   # Return if path is not "/hello"
   (if (!= (req .get "path") "/hello")
      (return)
    else
      nil
   )

   (var params (req .get "params"))
   (if (params .contains "name")
      (do
         # respond not implemented
         (print "Would respond: Hello world!")
         {^status 200 ^body "Hello world!"})
    else
      (do
         # respond not implemented
         (print "Would respond: Hello else")
         {^status 200 ^body "Hello world!"})
   )
)

# A handler that responds to /secret
# Please note that the authentication is handled in `auth` middleware.
(fn secret [req]
   (if (!= (req .get "path") "/secret")
      (return)
    else
      nil
   )

   # respond not implemented
   (print "Would respond: Secret message")
   {^status 200 ^body "Sssh, do not tell this to anyone!"}
)

# A dummy passcode used for authentication
(var passcode "secret")

# Middlewares wrap `handler` with some logic.
# `auth` is a middleware that makes sure access to critical resources are authenticated.
(fn auth [handler]
   # Anonymous functions not yet supported, using named function
   (fn auth_handler [req]
      (if (!= (req .get "path") "/secret")
         (return (handler req))
       else
         nil
      )

      (var authenticated
         # Read and check passcode from Authorization header
         # base64_decode not available
         (== ((req .get "headers") .get "authorization") passcode)
      )
      (if authenticated
         (handler req)
       else
         # respond not implemented
         {^status 401 ^body "Unauthorized"}
      )
   )
   auth_handler
)

# Server port defaults to 2080 but can be passed in the command line.
(var port 2080)
# Command line args not yet supported
# (if (> ($cmd_args/.size) 1)
#    (var port ($cmd_args/1/.to_i))

# Create and initialize the app
(var app (new App port))
# middlewares.add not yet supported - set directly
# For now, skip middleware setup due to function value issues
# (= app/middlewares [auth])
(= app/middlewares [])
(var router (new DummyRouter))
# handlers.add not yet supported - set directly
# For now, skip handler setup due to function value issues
# (= router/handlers [hello secret])
(= router/handlers [])
(= app/handler router)

# Start the app
(app .start)