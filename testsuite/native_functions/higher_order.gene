#!/usr/bin/env gene run

# Test: Higher-order native functions (map, filter, reduce)

# Define some test functions
(fn double [x]
  (* x 2))

(fn square [x]
  (* x x))

(fn is_even [x]
  (== (- x (* (/ x 2) 2)) 0))

(fn is_positive [x]
  (> x 0))

(fn add [a b]
  (+ a b))

(fn multiply [a b]
  (* a b))

# Test map
(print "map [1 2 3] double = " (map [1 2 3] double))
(print "map [2 3 4] square = " (map [2 3 4] square))
(print "map [] double = " (map [] double))

# Test filter  
(print "filter [1 2 3 4 5] is_even = " (filter [1 2 3 4 5] is_even))
(print "filter [-2 -1 0 1 2] is_positive = " (filter [-2 -1 0 1 2] is_positive))
(print "filter [1 3 5] is_even = " (filter [1 3 5] is_even))

# Test reduce
(print "reduce [1 2 3 4] add 0 = " (reduce [1 2 3 4] add 0))
(print "reduce [2 3 4] multiply 1 = " (reduce [2 3 4] multiply 1))
(print "reduce [] add 10 = " (reduce [] add 10))

# Test nested operations
(var nums = [1 2 3 4 5])
(print "map then filter: " (filter (map nums double) is_even))
(print "filter then map: " (map (filter nums is_even) square))
(print "reduce mapped values: " (reduce (map nums square) add 0))