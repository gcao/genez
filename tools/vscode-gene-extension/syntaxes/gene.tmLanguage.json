{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Gene",
  "patterns": [
    {"include": "#comments"},
    {"include": "#expressions"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.gene",
          "match": "#.*$"
        },
        {
          "name": "comment.block.gene",
          "begin": "#<",
          "end": ">#",
          "patterns": [
            {"include": "#comments"}
          ]
        }
      ]
    },
    "expressions": {
      "patterns": [
        {"include": "#literals"},
        {"include": "#keywords"},
        {"include": "#special-forms"},
        {"include": "#built-in-functions"},
        {"include": "#operators"},
        {"include": "#identifiers"},
        {"include": "#properties"}
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.float.gene",
          "match": "\\b-?\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.gene",
          "match": "\\b-?\\d+\\b"
        },
        {
          "name": "string.quoted.double.gene",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.gene",
              "match": "\\\\(n|r|t|\\\\|\")"
            }
          ]
        },
        {
          "name": "string.quoted.triple.gene",
          "begin": "\"\"\"",
          "end": "\"\"\""
        },
        {
          "name": "constant.character.gene",
          "match": "'([^'\\\\]|(\\\\.))'",
          "captures": {
            "2": {"name": "constant.character.escape.gene"}
          }
        },
        {
          "name": "constant.language.boolean.true.gene",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.gene",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.nil.gene",
          "match": "\\bnil\\b"
        },
        {
          "name": "constant.other.symbol.gene",
          "match": ":[a-zA-Z_][a-zA-Z0-9_\\-\\?\\!]*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.gene",
          "match": "\\b(if|else|do|match|when)\\b"
        },
        {
          "name": "storage.type.function.gene",
          "match": "\\b(fn|fnx|macro)\\b"
        },
        {
          "name": "storage.type.gene",
          "match": "\\b(var|const)\\b"
        },
        {
          "name": "storage.type.class.gene",
          "match": "\\b(class|trait|mixin|abstract|extends|implements|includes)\\b"
        },
        {
          "name": "keyword.other.gene",
          "match": "\\b(new|self|super|ns|import|export|as)\\b"
        }
      ]
    },
    "special-forms": {
      "patterns": [
        {
          "match": "(\\()\\s*(var)\\s+([a-zA-Z_][a-zA-Z0-9_\\-\\?\\!]*)\\s*(=)?",
          "captures": {
            "1": {"name": "punctuation.definition.list.begin.gene"},
            "2": {"name": "storage.type.gene"},
            "3": {"name": "variable.other.gene"},
            "4": {"name": "keyword.operator.assignment.gene"}
          }
        },
        {
          "match": "(\\()\\s*(fn|macro)\\s+([a-zA-Z_][a-zA-Z0-9_\\-\\?\\!]*)",
          "captures": {
            "1": {"name": "punctuation.definition.list.begin.gene"},
            "2": {"name": "storage.type.function.gene"},
            "3": {"name": "entity.name.function.gene"}
          }
        },
        {
          "match": "(\\()\\s*(class)\\s+([A-Z][a-zA-Z0-9_]*)",
          "captures": {
            "1": {"name": "punctuation.definition.list.begin.gene"},
            "2": {"name": "storage.type.class.gene"},
            "3": {"name": "entity.name.type.class.gene"}
          }
        },
        {
          "match": "(\\()\\s*(ns)\\s+([a-zA-Z_][a-zA-Z0-9_\\-\\.]*)",
          "captures": {
            "1": {"name": "punctuation.definition.list.begin.gene"},
            "2": {"name": "keyword.other.namespace.gene"},
            "3": {"name": "entity.name.namespace.gene"}
          }
        }
      ]
    },
    "built-in-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.gene",
          "match": "\\b(print|println|length|type|str|int|float|array|map|get|set|push|pop|at|keys|values|has)\\b"
        },
        {
          "name": "support.function.builtin.io.gene",
          "match": "\\b(read|write|open|close|flush)\\b"
        },
        {
          "name": "support.function.builtin.math.gene",
          "match": "\\b(abs|min|max|floor|ceil|round|sqrt|pow|sin|cos|tan)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.gene",
          "match": "\\+|\\-|\\*|/|%|\\+\\+"
        },
        {
          "name": "keyword.operator.comparison.gene",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.gene",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.gene",
          "match": "="
        },
        {
          "name": "keyword.operator.dot.gene",
          "match": "\\."
        },
        {
          "name": "keyword.operator.slash.gene",
          "match": "/"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.constant.gene",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        },
        {
          "name": "entity.name.type.gene",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.gene",
          "match": "[a-zA-Z_][a-zA-Z0-9_\\-\\?\\!]*"
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "name": "variable.other.property.gene",
          "match": "\\^[a-zA-Z_][a-zA-Z0-9_\\-]*"
        },
        {
          "name": "variable.other.property.boolean.gene",
          "match": "\\^\\^[a-zA-Z_][a-zA-Z0-9_\\-]*"
        },
        {
          "name": "variable.other.property.negated.gene",
          "match": "\\^![a-zA-Z_][a-zA-Z0-9_\\-]*"
        }
      ]
    }
  },
  "scopeName": "source.gene"
}